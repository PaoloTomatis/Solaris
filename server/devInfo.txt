// Calcolo humMin e humMax
// Ricavo dati database

interface DeviceSettingsType {
    _id: string;
    humMax: number;
    humMin: number;
    interval: number;
    deviceId: string;
    createdAt: Date;
    updatedAt: Date;
}

interface DataType {
    humI: number | [number, number];
    interval: number;
}

const dataDB : DataType[] = [ {humI:[25, 65], interval: 118}, {humI:[25, 70], interval: 150}, {humI:[27, 73], interval: 122}, {humI:[28, 78], interval: 113}, {humI:[29, 80], interval: 130}, {humI:[29, 72], interval: 125}, {humI:[35, 70], interval: 120}, {humI:[35, 70], interval: 120}];

// Controllo dati


// Sort dei dati per humI1
const sortedData1 = dataDB
    .sort((a : {humI: number | [number, number] | undefined}, b: {humI: number | [number, number] | undefined}) => {
        return Array.isArray(a.humI) && Array.isArray(b.humI)
            ? a.humI[0] - b.humI[0]
            : 0;
    })
    .map((data : {humI: number | [number, number] | undefined}) => (Array.isArray(data.humI) ? data.humI[0] : undefined));

// Dichiarazione lista dati per humI1
const data1: ({ humI: number; peso: number } | undefined)[] = [];

// Dichiarazione posizione centrale per humI1
const posC1: number | [number, number] =
    sortedData1.length % 2 == 0
        ? [sortedData1.length / 2 + 0.5, sortedData1.length / 2 - 0.5]
        : sortedData1.length / 2;

// Dichiarazione media
let media1 = 0;

sortedData1.forEach((data): Response | void => {
    // Dichiarazione peso
    let peso: number = 0;

    // Controllo dato
    if (data) {
        // Controllo posC1
        if (Array.isArray(posC1)) {
            // Calcolo pesi
            const pesoM1 =
                sortedData1.length / 2 +
                Math.abs(posC1[1] - sortedData1.indexOf(data));
            const pesoM2 =
                sortedData1.length / 2 +
                Math.abs(posC1[0] - sortedData1.indexOf(data));

            // Assegnazione peso
            peso = pesoM1 < pesoM2 ? pesoM1 : pesoM2;
        } else if (!isNaN(posC1)) {
            // Assegnazione peso
            peso =
                sortedData1.length / 2 +
                0.5 +
                Math.abs(posC1 - sortedData1.indexOf(data));
        } else {
            console.error("Errore nel calcolo dei pesi per l'algoritmo di humMax e humMin!")
        }

        data1.push({
            humI: data,
            peso,
        });
    }
});

// Calcolo media
data1.forEach((data) => {
    // Somma alla media
    media1 += data ? data.humI * data.peso : 0;
});

console.log(media1)


const humMin =
    sortedData1.length % 2 == 0
        ? media1 /
          ((sortedData1.length / 2) * (sortedData1.length / 2 + 1))
        : (media1 / (sortedData1.length / 2 + 0.5)** 2) ;

// Calcolo kInterval
// Dichiarazione medie
let mediaInt1 = 0;
let mediaInt2 = 0;
let valsInt1 = 0;
let valsInt2 = 0;

// Calcolo medie
dataDB.forEach((data) => {
    // Controllo interval
    if (data.interval) {
        // Somma alla media 1
        mediaInt1 += data.interval;
        // Somma valori 1
        valsInt1 += 1;
    }
    // Controllo humI
    if (Array.isArray(data.humI)) {
        // Somma alla media 2
        mediaInt2 += data.humI[1] - data.humI[0];
        // Somma valori 2
        valsInt2 += 1;
    }
});
mediaInt1 = mediaInt1 / valsInt1;
mediaInt2 = mediaInt2 / valsInt2;
const interval = mediaInt1 / mediaInt2;

console.log(interval)
console.log(humMin)